#include<iostream>
using namespace std;
class Queue
{
        private:
            int rear;
            int front;
            int* store;
            int size;
        public:
            Queue(int size)
            {
                this->size=size;
                front=rear=-1;
                store=new int [size];
            }
            ~Queue()
            {
                delete[]store;
            }
            int isEmpty()
            {
             if((front==-1 && rear==-1) || (front>rear))
                return 1;
                return 0;
            }
            int isFull()
            {
                if(rear==(size-1))
                    return 1;
                    return 0;
            }
            void enque(int data)
            {
                if(!isFull())
                {
                    store[++rear]=data;
                    if(front==-1)
                        front=0;
                }
            }
            int deque()
            {
                if(!isEmpty())
                    front++;
            }
            int getCompare()
            {
                return front==rear;
            }
            void print()
            {
                cout<<(rear-front)<<" ";
                do{
                    front++;
                    cout<<store[front]<<" ";
                }while(front!=rear);
            }
            
            
};

int main()
{   
    Queue s(10);
    int x,y=0,z;
    cin>>z;
    while(1)
    {
        cin>>x;
        if(x==-1)
        {
            break;
        }
        if(x==0 || x>-1 && x<=z)
        {
            s.enque(x);
        }
        while(y<=x)
        {
            if((y+1)%3==0 && y<=z && (!s.getCompare()))
                s.deque();
                y++;
        }
    }
    s.print();
    return 0;
}